import e from"fs";import*as t from"@react-pdf/primitives";export*from"@react-pdf/primitives";import r from"blob-stream";import n from"@react-pdf/font";import o from"@react-pdf/render";import i from"@react-pdf/pdfkit";import a from"@react-pdf/layout";import c from"react-reconciler";import{unstable_scheduleCallback as s,unstable_cancelCallback as p}from"scheduler";const l=(e,t)=>{const r=Object.keys(e),n=Object.keys(t);if(r.length!==n.length)return!1;for(let n=0;n<r.length;n+=1){const o=r[n];if("render"===o&&!e[o]!=!t[o])return!1;if("children"!==o&&e[o]!==t[o]){if("object"==typeof e[o]&&"object"==typeof t[o]&&l(e[o],t[o]))continue;return!1}if("children"===o&&("string"==typeof e[o]||"string"==typeof t[o]))return e[o]===t[o]}return!0},d={};var f="2.0.0-alpha.15";const u=new n,m=({initialValue:e,onChange:t})=>{const n={type:"ROOT",document:null,lang:"en-US"},f=(({onChange:e=(()=>{})})=>c({schedulePassiveEffects:s,cancelPassiveEffects:p,supportsMutation:!0,isPrimaryRenderer:!1,warnsIfNotActing:!1,appendInitialChild(e,t){e.children.push(t)},createInstance:(e,{style:t,children:r,...n})=>({type:e,box:{},style:t||{},props:n||{},children:[]}),createTextInstance:(e,t)=>({type:"TEXT_INSTANCE",value:e}),finalizeInitialChildren:(e,t,r)=>!1,getPublicInstance:e=>e,prepareForCommit(){},prepareUpdate:(e,t,r,n)=>!l(r,n),resetAfterCommit:e,resetTextContent(e){},getRootHostContext:()=>d,getChildHostContext:()=>d,shouldSetTextContent:(e,t)=>!1,now:Date.now,useSyncScheduling:!0,appendChild(e,t){e.children.push(t)},appendChildToContainer(e,t){"ROOT"===e.type?e.document=t:e.children.push(t)},insertBefore(e,t,r){const n=e.children.indexOf(r);-1!==n&&t&&e.children.splice(n,0,t)},removeChild(e,t){const r=e.children.indexOf(t);-1!==r&&e.children.splice(r,1)},removeChildFromContainer(e,t){const r=e.children.indexOf(t);-1!==r&&e.children.splice(r,1)},commitTextUpdate(e,t,r){e.value=r},commitUpdate(e,t,r,n,o){const{style:i,...a}=o;e.props=a,e.style=i}}))({onChange:t}),m=f.createContainer(n),h=e=>{f.updateContainer(e,m,null)};e&&h(e);const y=()=>{const{document:e}=n;return e.props?e.props.lang:null},g=async()=>{const e=new i({autoFirstPage:!1,lang:y()}),t=await a(n.document,u);return o(e,t)},C=(e={})=>{n.document.props.onRender&&n.document.props.onRender(e)};return{container:n,toBlob:async()=>{const e=(await g()).pipe(r());return new Promise((t,r)=>{e.on("finish",()=>{try{const n=e.toBlob("application/pdf");C({blob:n}),t(n)}catch(e){r(e)}}),e.on("error",r)})},toBuffer:async()=>(C(),g()),toString:async()=>{let e="";const t=await g();return new Promise((r,n)=>{try{t.on("data",t=>{e+=t}),t.on("end",()=>{r(e)})}catch(e){n(e)}})},updateContainer:h}},h=u,y={create:e=>e},g=async e=>{const t=m({initialValue:e});return await t.toBuffer()},C=e=>{return m({initialValue:e}).toString()},w=async(t,r,n)=>{const o=await g(t),i=e.createWriteStream(r);return o.pipe(i),new Promise((e,t)=>{i.on("finish",()=>{n&&n(o,r),e(o)}),i.on("error",t)})},b=e=>{throw new Error(`${e} is a web specific API. You're either using this component on Node, or your bundler is not loading react-pdf from the appropriate web build.`)},P=()=>{b("PDFViewer")},x=()=>{b("PDFDownloadLink")},T=()=>{b("BlobProvider")},v=w;export default{pdf:m,Font:u,version:"2.0.0-alpha.15",StyleSheet:y,PDFViewer:P,BlobProvider:T,PDFDownloadLink:x,renderToStream:g,renderToString:C,renderToFile:w,render:w,...t};export{T as BlobProvider,h as Font,x as PDFDownloadLink,P as PDFViewer,y as StyleSheet,m as pdf,v as render,w as renderToFile,g as renderToStream,C as renderToString,f as version};
//# sourceMappingURL=react-pdf.es.min.js.map
